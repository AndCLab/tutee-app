<?php

namespace Database\Factories;

use App\Models\RecurringSchedule;
use App\Models\Schedule;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Schedule>
 */
class ScheduleFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    protected $model = Schedule::class;

    // Schedule-related properties
    public $sched_initial_date;
    public $start_time;
    public $end_time;
    public int $interval;
    public $interval_unit;
    public $occurrences;
    public $frequency = 'once';
    public $generatedDates = [];

    /**
     * Generate schedule dates based on frequency, interval, and occurrences.
     */
    public function sched_create()
    {
        $this->generatedDates = [];
        $startDate = Carbon::parse($this->sched_initial_date);

        if ($this->frequency === 'once') {
            // Add a single occurrence
            $this->generatedDates[] = $startDate->format('Y-m-d');
        } else {
            // Add recurring dates based on the interval and occurrences
            for ($i = 0; $i < $this->occurrences; $i++) {
                $this->generatedDates[] = $startDate->copy()->format('Y-m-d');
                $startDate->add($this->interval, $this->interval_unit);
            }
        }
    }

    /**
     * Define the factory default data with random values.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        do {
            // Set random start time between 8 AM and 5 PM
            $this->start_time = fake()->time('H:i:s');

            // Generate end time after the start time, ensuring it's later
            $this->end_time = Carbon::createFromFormat('H:i:s', $this->start_time)
                ->addMinutes(fake()->numberBetween(30, 180))  // Add 30 to 180 minutes
                ->format('H:i:s');

            // Generate other random values
            $this->sched_initial_date = Carbon::now()->addDays(fake()->numberBetween(1, 30))->format('Y-m-d');
            $this->interval = fake()->numberBetween(1, 5);
            $this->interval_unit = fake()->randomElement(['days', 'weeks', 'months']);
            $this->occurrences = fake()->numberBetween(1, 10);
            $this->frequency = fake()->randomElement(['once', 'every']);

            // Call sched_create to generate recurring dates
            $this->sched_create();

            // Check if a schedule with the given time range already exists after generating random values
            $scheduleExists = Schedule::whereTime('start_time', '<=', $this->end_time)
                                      ->whereTime('end_time', '>', $this->start_time)
                                      ->exists();
        } while ($scheduleExists);  // Keep generating new values until a non-conflicting schedule is found

        // Schedule data structure
        $scheduleData = [
            'start_time' => $this->start_time,
            'end_time' => $this->end_time,
            'frequency' => $this->frequency,
        ];

        // Add interval, unit, and occurrences if frequency is not 'once'
        if ($this->frequency != 'once') {
            $scheduleData['interval'] = $this->interval;
            $scheduleData['interval_unit'] = $this->interval_unit;
            $scheduleData['occurrences'] = $this->occurrences;
        }

        // Create the schedule
        $schedule = Schedule::create($scheduleData);

        // Add recurring schedule dates
        foreach ($this->generatedDates as $date) {
            RecurringSchedule::create([
                'schedule_id' => $schedule->id,
                'dates' => $date
            ]);
        }

        // Return the random values generated by Faker
        return [
            'start_time' => $this->start_time,
            'end_time' => $this->end_time,
            'occurrences' => $this->occurrences,
            'frequency' => $this->frequency,
            'interval' => $this->interval,
            'interval_unit' => $this->interval_unit,
        ];
    }


}
